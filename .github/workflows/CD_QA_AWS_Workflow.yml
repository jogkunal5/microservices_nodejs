name: Deploy on QA
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ACTIONS_STEP_DEBUG: true

jobs:
  deploy_on_qa:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      
      - name: Create customer Env file
        working-directory: ./customer
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.QA_APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.QA_CUSTOMER_DB_URL }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.QA_MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=ONLINE_STORE >> .env
          echo PORT=8001 >> .env
          cat .env

      - name: Create Products Env file
        working-directory: ./products
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.QA_APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.QA_PRODUCTS_DB_URL }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.QA_MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=ONLINE_STORE >> .env
          echo PORT=8002 >> .env
          cat .env
          
      - name: Create shopping Env file
        working-directory: ./shopping
        run: |
          touch .env
          echo APP_SECRET=${{ secrets.QA_APP_SECRET }} >> .env
          echo MONGODB_URI=${{ secrets.QA_SHOPPING_DB_URL }} >> .env
          echo MSG_QUEUE_URL=${{ secrets.QA_MSG_QUEUE_URL }} >> .env
          echo EXCHANGE_NAME=ONLINE_STORE >> .env
          echo PORT=8003 >> .env
          cat .env

    # Debugging: Verify the .env files and list files in the directory
      - name: Check .env files and directory contents
        run: |
          echo "Verifying customer .env"
          cat ./customer/.env
          echo "Verifying products .env"
          cat ./products/.env
          echo "Verifying shopping .env"
          cat ./shopping/.env
          echo "Listing files in the root directory"
          ls -alh
          
      - name: Generate deployment package
        run: |
          zip -r deploy.zip . -x '*.git'

      # Debugging: List files in the root directory before creating the deployment zip
      - name: List files before deployment package
        run: |
          echo "Listing files before creating deployment package"
          ls -alh
      
      - name: Deploy on Elastic beanstalk QA Env
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: rjscart
          environment_name: Rjscart-env 
          version_label: "ver-${{ github.sha }}-${{ github.run_id }}"
          region: us-east-1
          deployment_package: deploy.zip
        env:
          DEBUG: true

       # Additional debugging: Check for running containers in EBS
      - name: Check Elastic Beanstalk Health and Logs
        run: |
          echo "Checking Elastic Beanstalk environment health"
          aws elasticbeanstalk describe-environments --environment-names Rjscart-env --region us-east-1
          echo "Fetching logs from Elastic Beanstalk"
          aws elasticbeanstalk retrieve-environment-info --info-type tail --environment-name Rjscart-env --region us-east-1
          
      # Wait for deployment and check health of the environment
      - name: Wait for environment to be healthy
        run: |
          echo "Waiting for Elastic Beanstalk environment to stabilize"
          sleep 60  # Wait for 60 seconds before checking health status again
          echo "Checking Elastic Beanstalk environment health status"
          aws elasticbeanstalk describe-environments --environment-names Rjscart-env --region us-east-1
